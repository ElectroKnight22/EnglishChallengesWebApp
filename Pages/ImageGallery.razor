@using EnglishChallengesWebApp.Resources.Model
@using Newtonsoft.Json
@using Supabase.Storage

@inherits SupabaseClient

@inject SweetAlertService Swal

@page "/Gallery"

<h3>ImageGallery</h3>

<div>
    @*        <span>
    <input @bind="@searchQuery" @oninput="@((e) => { searchQuery=(string)e.Value;})">
    <button class="btn btn-primary" @onclick="SearchFile">Search</button>
    </span>*@
    @*Real search is not yet supported by the c# implementation of Supabase.*@
    <div>
        @{
            <p>
                <label>
                    Upload @(maxAllowedFiles == 0 ? "" : $"up to {maxAllowedFiles} ")images up to @(allowFileSizeKB) KB each:
                    <InputFile OnChange="@LoadFilesMulti" accept="image/*" multiple />
                </label>
                @if (LoadedFiles.Any())
                {
                    <button @onclick="UploadFileMulti">@(IsUploading ? "Uploading..." : "Upload")</button>
                    <button @onclick="CancelUpload">@(IsUploading ? "Uploading..." : "Cancel")</button>
                }
            </p>

            if (IsLoading)
            {
                <p>Uploading...</p>
            }
            else
            {
                <ul>
                    @foreach (var file in LoadedFiles)
                    {
                        string textColorString = "color:#000000";
                        if (file.Size > maxFileSize) { textColorString = "color:#FF0000"; }
                        <li>
                            <ul>
                                <li>Name: @file.Name</li>
                                <li style=@textColorString>Size (KB): @(Math.Ceiling((decimal)file.Size / 1024))</li>
                            </ul>
                        </li>
                    }
                </ul>
            }
        }
    </div>

    <span>
        <label for="items-per-page">Items per page:</label>
        <select name="items-per-page" @bind="@itemsPerPage">
            <option value="15">15</option>
            <option value="25">25</option>
            <option value="50">50</option>
        </select>
        <label for="current-page">Current page:</label>
        <select name="current-page" @bind="@pageNumber">
            @{
                int totalPages = (int)Math.Ceiling((decimal)DatabaseFiles.Count() / itemsPerPage);

                int page = 1;
                for (int i = 0; i < totalPages; i++)
                {
                    int currentPage = page;
                    <option value="@currentPage">@currentPage</option>

                    page++;
                }
            }
        </select>

    </span>
    <p>
        <span>
            <input @bind="@SearchQuery" placeholder="search" />
            <button @onclick="() =>SearchFile(SearchQuery)">Search</button>
            <button @onclick="ToggleDelete">@(isDeleting ? "Deleting" : "Delete")</button>
        </span>
    </p>

</div>
<div>
    @{
        skippedItems = itemsPerPage * (pageNumber - 1);
        foreach (FileObject file in DatabaseFiles.Skip(skippedItems).Take(itemsPerPage).ToList())
        {
            if (file.Name != ".emptyFolderPlaceholder")
            {
                string fileName = file.Name ?? string.Empty;
                string source = _CDNURL + fileName;
                <p>
                    @if (isDeleting)
                    {
                        <button class="btn btn-danger" style="margin:10px;" @onclick="() =>DeleteFile(fileName)">Delete</button>
                    }
                    <img name="gallery-image" src=@source alt=@fileName height="100" style="margin:10px;">
                    <label for="gallery-image">@fileName</label>
                </p>
            }
        }
    }
</div>

@code {
    static int itemsPerPage { get; set; } = 15;
    static int itemsPerPageNew { get; set; } = 15;
    static int pageNumber { get; set; } = 1;
    static int pageNumberNew { get; set; } = 1;
    static int skippedItems { get; set; } = 0;
    bool isDeleting { get; set; } = false;

    void ToggleDelete()
    {
        isDeleting = !isDeleting;
    }
}
