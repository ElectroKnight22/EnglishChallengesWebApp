@using EnglishChallengesWebApp.Resources.Model

@inject NavigationManager NavMan
@inject IJSRuntime JS

@inherits Level

@page "/Editing/{LevelNumber:int}/{LevelType}/{QuestionSetId:int}"


@*@attribute [Authorize]*@


<head>
    <meta charset="utf-8" />
    <title>LevelEditorPage</title>
</head>

<body>
    <AuthorizeView>
        <Authorized>
            <button class="btn btn-primary" @onclick="AddQuestion" style="margin:10px;">Add</button>
            <button class="btn btn-primary" @onclick="PlayLevel" style="margin:10px;">Play</button>
        </Authorized>
    </AuthorizeView>


    <dialog @ref="dialogRef">
        <div>
            <input type="submit" value="Save" @onclick="@(isEditing? UpdateQuestion : AddQuestion)" />
            <button @onclick="RemoveQuestion">Delete</button>
            <button style="float: right" @onclick="CloseDialog">Close</button>
        </div>
        <div>
            <img class="dialog-image" src="@ImageSource" />
            <form method="dialog">
                <label for="prompt">Question Prompt</label>
                <input id="prompt" type="text" @bind="@Prompt" />
                @if (LevelType == "yesno")
                {
                    <label for="ca">Correct Answer</label>
                    <select id="ca" name="true-false-answer" @bind="@IsTrueString">
                        <option value="True">yes</option>
                        <option value="False">no</option>
                    </select>
                }
                else
                {
                    <label for="ca">Correct Answer</label>
                    <input id="ca" type="text" @bind="@CorrectAnswer" />
                    <label for="wa1">Wrong Answer 1</label>
                    <input id="wa1" type="text" @bind="@WrongAnswer1" />
                    <label for="wa2">Wrong Answer 2</label>
                    <input id="wa2" type="text" @bind="@WrongAnswer2" />
                }
            </form>
        </div>

        <!--file upload div-->
        <div>
            <p>
                @if (LoadedFile == null)
                {
                    <label>Image link OR name in gallery:</label>
                    <input @bind="@ImageSource">
                    <label> or </label>
                }

                @*Image uploader*@
                <div>
                    @if (string.IsNullOrEmpty(ImageSource))
                    {
                        <p>
                            <label>
                                Upload an image up to @(allowFileSizeKB) KB:
                                <InputFile OnChange="@LoadFile" accept="image/*" multiple />
                            </label>
                            @if (LoadedFile != null)
                            {
                                <button @onclick="CancelUpload">@(IsUploading ? "Uploading..." : "Cancel")</button>
                            }
                        </p>

                        if (IsLoading)
                        {
                            <p>Uploading...</p>
                        }
                        else if (LoadedFile != null)
                        {
                            string textColorString = "color:#000000";
                            if (FileTooLarge) { textColorString = "color:#FF0000"; }
                            <ul>
                                <li>Name: @LoadedFile.Name</li>
                                <li style=@textColorString>Size (KB): @(Math.Ceiling((decimal)LoadedFile.Size / 1024))</li>
                            </ul>
                        }
                    }
                </div>
            </p>

        </div>
    </dialog>


    <div>
        <button class="btn btn-primary" @onclick="@(e => OpenDialog(null))">Add New</button>
        <button class="btn btn-primary" @onclick="PlayLevel" style="margin:10px;">Play</button>
    </div>
    <div>
        @{
            int index = 0;
            foreach (Question question in QuestionList)
            {
                int i = index;

                <button @onclick="@(e => OpenDialog(question))" class="card-button" style="border: none">
                    <div class="card">
                        <img class="card-image" src=@question.ImageSource alt="image missing">
                        <div class="container">
                            <p>@question.Prompt</p>
                        </div>
                    </div>
                </button>
                index++;
            }
        }
    </div>
</body>


@code {
    ElementReference dialogRef;


    bool isEditing { get; set; } = false;

    string CorrectAnswer { get; set; } = string.Empty;
    string WrongAnswer1 { get; set; } = string.Empty;
    string WrongAnswer2 { get; set; } = string.Empty;
    string Prompt { get; set; } = string.Empty;
    string IsTrueString { get; set; } = "True";
    string ImageSource { get; set; } = string.Empty;
    Guid guid { get; set; }


    Question question = new();


    protected override async Task OnInitializedAsync()
    {
        QuestionHashSet = new();
        await RetrieveAllFiles();
        await LoadQuestionSet();
    }

    private void PlayLevel()
    {
        NavMan.NavigateTo($"Playing/{LevelNumber}/{LevelType}/{QuestionSetId}/");
    }


    async Task<bool> BuildQuestion()
    {
        if (FileTooLarge)
        {
            await CloseDialog();
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Icon = "error",
                    Title = "Image too large!",
                    Text = "You have exceeded the maximum image size. Please upload an image smaller than 1.5mb.",
                });
            return false;
        }

        bool canContinue = false;
        switch (LevelType)
        {
            case "multiplechoice":
                canContinue = BuildAnswerMC();
                break;
            case "yesno":
                canContinue = BuildAnswerYN();
                break;
            default:
                break;
        }

        if (canContinue == true)
        {
            if (!string.IsNullOrEmpty(Prompt))
            {
                question.Prompt = Prompt;
            }
            if (Uri.TryCreate(ImageSource, UriKind.Absolute, out Uri? uriResult)
            && (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps))
            {
                question.ImageSource = ImageSource;
            }
            else if (!string.IsNullOrEmpty(ImageSource))
            {
                question.ImageSource = _CDNURL + ImageSource;
            }
            else if (LoadedFile != null)
            {
                question.ImageSource = _CDNURL + LoadedFile.Name;
                await UploadFile();
            }

            question.Guid = Guid.NewGuid();

            QuestionHashSet.Add(question);

            return true;



        }
        else
        {
            return false;
            await CloseDialog();
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Icon = "error",
                    Title = "Oops...",
                    Text = "It seems like you have not entered an answer for your new question.",
                });
        }
    }

    async Task AddQuestion()
    {
        bool success = await BuildQuestion();
        if (success)
        {
            await UpdateQuestionSet();
            await LoadQuestionSet();
        }
        await CloseDialog();
    }


    async Task UpdateQuestion()
    {
        bool success = await BuildQuestion();
        if (success)
        {

            Question oldQuestion = new()
                {
                    Guid = guid,
                };
            QuestionHashSet.Remove(oldQuestion);
            await UpdateQuestionSet();
            await LoadQuestionSet();
        }
       await CloseDialog();
    }

    bool BuildAnswerMC()
    {
        if (!string.IsNullOrEmpty(CorrectAnswer) && !string.IsNullOrEmpty(WrongAnswer1) && !string.IsNullOrEmpty(WrongAnswer2))
        {
            question.CorrectAnswer = CorrectAnswer;
            question.WrongAnswer1 = WrongAnswer1;
            question.WrongAnswer2 = WrongAnswer2;
            return true;
        }
        return false;
    }

    bool BuildAnswerYN()
    {
        if (!string.IsNullOrEmpty(IsTrueString) && !string.IsNullOrEmpty(Prompt))
        {
            question.CorrectAnswer = IsTrueString;
            return true;
        }
        return false;
    }
    async Task RemoveQuestion()
    {
        Question question = new() { Guid = guid, };
        QuestionHashSet.Remove(question);
        await CloseDialog();
        await UpdateQuestionSet();
        await LoadQuestionSet();
    }
    async Task UpdateQuestionSet()
    {
        var update = await Supabase
        .From<QuestionSet>()
        .Where(x => x.Id == QuestionSetId)
        .Set(x => x.Questions ?? new(), QuestionHashSet)
        .Update();
    }
    void ClearInputs()
    {
        CorrectAnswer = string.Empty;
        WrongAnswer1 = string.Empty;
        WrongAnswer2 = string.Empty;
        Prompt = string.Empty;
        ImageSource = string.Empty;
        LoadedFile = null;
        guid = Guid.Empty;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JS.InvokeVoidAsync("BlazorDialogReady");
                await JS.InvokeVoidAsync("BlazorDialog.registerDialog", dialogRef);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
    }

    async Task OpenDialog(Question? question)
    {
        if (question != null)
        {
            isEditing = true;
            CorrectAnswer = question.CorrectAnswer;
            WrongAnswer1 = question.WrongAnswer1;
            WrongAnswer2 = question.WrongAnswer2;
            Prompt = question.Prompt;
            ImageSource = question.ImageSource;
            guid = question.Guid;
        }

        await JS.InvokeVoidAsync("BlazorDialog.open", dialogRef);
    }

    async Task CloseDialog()
    {
        isEditing = false;
        ClearInputs();
        await JS.InvokeVoidAsync("BlazorDialog.close", dialogRef);
    }
}