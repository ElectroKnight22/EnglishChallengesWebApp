@using EnglishChallengesWebApp.Resources.Model

@inject NavigationManager NavMan
@inject IJSRuntime JS

@inherits Level

@page "/Editing/{LevelNumber:int}/{LevelType}/{QuestionSetId:int}"


@*@attribute [Authorize]*@


<head>
    <meta charset="utf-8" />
    <title>LevelEditorPage</title>
</head>

<body>
    <AuthorizeView>
        <Authorized>
            <button class="btn btn-primary" @onclick="AddQuestion" style="margin:10px;">Add</button>
            <button class="btn btn-primary" @onclick="PlayLevel" style="margin:10px;">Play</button>
        </Authorized>
    </AuthorizeView>


    <dialog @ref="editDialogRef">
        <div>
            <input type="submit" value="Save" @onclick="@(isEditing? UpdateQuestion : AddQuestion)" />
            <button @onclick="RemoveQuestion">Delete</button>
            <button style="float: right" @onclick="e => CloseDialog(editDialogRef)">Close</button>
        </div>

        <!--question details div-->
        <div>

            @if (string.IsNullOrEmpty(ImageSource))
            {
                ImageSource = "images/Placeholder_view_vector.svg.png";
            }
            <button class="dialog-image-button" @onclick="e => OpenDialog(null, uploadDialogRef)">
                <img class="dialog-image" src="@ImageSource" />
                <img class="click-hint-img" src="images/click-2384.svg" />
            </button>
            <form class="question-params" method="dialog">
                <label class="question-param-label" for="prompt">Question Prompt</label>
                <input id="prompt" type="text" @bind="@Prompt" />
                @if (LevelType == "yesno")
                {
                    <label class="question-param-label" for="ca">Correct Answer</label>
                    <select id="ca" name="true-false-answer" @bind="@IsTrueString">
                        <option value="True">yes</option>
                        <option value="False">no</option>
                    </select>
                }
                else
                {
                    <label class="question-param-label" for="ca">Correct Answer</label>
                    <input id="ca" type="text" @bind="@CorrectAnswer" />
                    <label class="question-param-label" for="wa1">Wrong Answer 1</label>
                    <input id="wa1" type="text" @bind="@WrongAnswer1" />
                    <label class="question-param-label" for="wa2">Wrong Answer 2</label>
                    <input id="wa2" type="text" @bind="@WrongAnswer2" />
                }
            </form>
        </div>
    </dialog>


    <dialog @ref="uploadDialogRef">
        <!--file upload div-->
        <div>
            @{
                var parameters = new
                {
                    PickMode = true,
                };
                var attributes = parameters.GetType().GetProperties()
                .Select(p => new KeyValuePair<string, object?>(p.Name, p.GetValue(parameters, null)))
                .ToArray();

                <ImageGallery @attributes=attributes OnNotify="SetQuestionImageFromGallery" />
            }

        </div>
    </dialog>

    <div>
        @{
            int n = 0;
            foreach (Question question in QuestionList)
            {
                n++;
            }
        }
        <button class="btn btn-primary" @onclick="@(e => StartNewQuestion())">Add New (@n)</button>
        <button class="btn btn-primary" @onclick="PlayLevel" style="margin:10px;">Play</button>
    </div>
    <div>
        @{
            int index = 0;
            foreach (Question question in QuestionList)
            {
                int i = index;

                <button @onclick="@(e => SelectQuestion(question))" class="card-button" style="border: none">
                    <div class="card">
                        <img class="card-image" src=@question.ImageSource alt="image missing">
                        <div class="question-container">
                            <div class="question-prompt">@question.Prompt</div>
                            <p>@question.CorrectAnswer</p>
                        </div>
                    </div>
                </button>
                index++;
            }
        }
    </div>
</body>


@code {
    ElementReference editDialogRef;
    ElementReference uploadDialogRef;

    bool isEditing { get; set; } = false;

    string CorrectAnswer { get; set; } = string.Empty;
    string WrongAnswer1 { get; set; } = string.Empty;
    string WrongAnswer2 { get; set; } = string.Empty;
    string Prompt { get; set; } = string.Empty;
    string IsTrueString { get; set; } = "True";
    string ImageSource { get; set; } = string.Empty;
    Guid guid { get; set; }


    Question question = new();


    protected override async Task OnInitializedAsync()
    {
        QuestionHashSet = new();
        await RetrieveAllFiles();
        await LoadQuestionSet();
    }

    async Task StartNewQuestion()
    {
        this.question = new();
        await OpenDialog(null, editDialogRef);
    }

    async Task SelectQuestion(Question question)
    {
        this.question = question;
        await OpenDialog(question, editDialogRef);
    }

    private void PlayLevel()
    {
        NavMan.NavigateTo($"Playing/{LevelNumber}/{LevelType}/{QuestionSetId}/");
    }


    async Task SetQuestionImageFromGallery(string fileName)
    {
        ImageSource = _CDNURL + fileName;
        question.ImageSource = ImageSource;
        await CloseDialog(uploadDialogRef);
        await CloseDialog(editDialogRef);
        await OpenDialog(question, editDialogRef);
    }


    async Task<bool> BuildQuestion()
    {
        if (FileTooLarge)
        {
            await CloseDialog(editDialogRef);
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Icon = "error",
                    Title = "Image too large!",
                    Text = "You have exceeded the maximum image size. Please upload a smaller image.",
                });
            return false;
        }

        bool canContinue = false;
        switch (LevelType)
        {
            case "multiplechoice":
                canContinue = BuildAnswerMC();
                break;
            case "yesno":
                canContinue = BuildAnswerYN();
                break;
            default:
                break;
        }

        if (canContinue == true)
        {
            if (!string.IsNullOrEmpty(Prompt))
            {
                question.Prompt = Prompt;
            }
            if (Uri.TryCreate(ImageSource, UriKind.Absolute, out Uri? uriResult)
            && (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps))
            {
                question.ImageSource = ImageSource;
            }
            else if (!string.IsNullOrEmpty(ImageSource))
            {
                question.ImageSource = _CDNURL + ImageSource;
            }
            else if (LoadedFile != null)
            {
                question.ImageSource = _CDNURL + LoadedFile.Name;
                await UploadFile();
            }

            question.Guid = Guid.NewGuid();

            QuestionHashSet.Add(question);

            return true;

        }
        else
        {
            return false;
        }
    }

    async Task AddQuestion()
    {
        bool success = await BuildQuestion();
        if (success)
        {
            await UpdateQuestionSet();
            await LoadQuestionSet();
        }

    }


    async Task UpdateQuestion()
    {
        bool success = await BuildQuestion();
        if (success)
        {

            Question oldQuestion = new()
                {
                    Guid = guid,
                };
            QuestionHashSet.Remove(oldQuestion);
            await UpdateQuestionSet();
            await LoadQuestionSet();
        }
        await CloseDialog(editDialogRef);
    }

    bool BuildAnswerMC()
    {
        if (!string.IsNullOrEmpty(CorrectAnswer) && !string.IsNullOrEmpty(WrongAnswer1) && !string.IsNullOrEmpty(WrongAnswer2))
        {
            question.CorrectAnswer = CorrectAnswer;
            question.WrongAnswer1 = WrongAnswer1;
            question.WrongAnswer2 = WrongAnswer2;
            return true;
        }
        return false;
    }

    bool BuildAnswerYN()
    {
        if (!string.IsNullOrEmpty(IsTrueString) && !string.IsNullOrEmpty(Prompt))
        {
            question.CorrectAnswer = IsTrueString;
            return true;
        }
        return false;
    }
    async Task RemoveQuestion()
    {
        Question question = new() { Guid = guid, };
        QuestionHashSet.Remove(question);
        await CloseDialog(editDialogRef);
        await UpdateQuestionSet();
        await LoadQuestionSet();
    }
    async Task UpdateQuestionSet()
    {
        var update = await Supabase
        .From<QuestionSet>()
        .Where(x => x.Id == QuestionSetId)
        .Set(x => x.Questions ?? new(), QuestionHashSet)
        .Update();
    }
    void ClearInputs()
    {
        isEditing = false;
        CorrectAnswer = string.Empty;
        WrongAnswer1 = string.Empty;
        WrongAnswer2 = string.Empty;
        Prompt = string.Empty;
        ImageSource = string.Empty;
        LoadedFile = null;
        guid = Guid.Empty;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JS.InvokeVoidAsync("BlazorDialogReady");
                await JS.InvokeVoidAsync("BlazorDialog.registerDialog", editDialogRef);
                await JS.InvokeVoidAsync("BlazorDialog.registerDialog", uploadDialogRef);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
    }

    async Task OpenDialog(Question? question, ElementReference dialogRef)
    {
        if (question != null)
        {
            isEditing = true;
            CorrectAnswer = question.CorrectAnswer;
            WrongAnswer1 = question.WrongAnswer1;
            WrongAnswer2 = question.WrongAnswer2;
            Prompt = question.Prompt;
            ImageSource = question.ImageSource;
            guid = question.Guid;
        }

        await JS.InvokeVoidAsync("BlazorDialog.open", dialogRef);
    }

    async Task CloseDialog(ElementReference dialogRef)
    {
        isEditing = false;
        ClearInputs();
        await JS.InvokeVoidAsync("BlazorDialog.close", dialogRef);
    }
}