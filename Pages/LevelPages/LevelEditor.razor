@using EnglishChallengesWebApp.Resources.Model

@inject NavigationManager NavMan

@inherits Level

@page "/Editing/{LevelNumber:int}/{LevelType}/{QuestionSetId:int}"


@*@attribute [Authorize]*@


<head>
    <meta charset="utf-8" />
    <title>LevelEditorPage</title>
</head>

<body>

    <AuthorizeView>
        <Authorized>
            <button class="btn btn-primary" @onclick="ToggleDelete" style="margin:10px;">Edit</button>
            <button class="btn btn-primary" @onclick="AddQuestion" style="margin:10px;">Add</button>
            <button class="btn btn-primary" @onclick="PlayLevel" style="margin:10px;">Play</button>
        </Authorized>
    </AuthorizeView>


    <div>
        @if (LevelType == "multiplechoice")
        {
            <p>
                <label>Correct Answer:</label>
                <input @bind="@CorrectAnswer">
            </p>
            <p>
                <label>Wrong Answer 1:</label>
                <input @bind="@WrongAnswer1">
            </p>
            <p>
                <label>Wrong Answer 2:</label>
                <input @bind="@WrongAnswer2">
            </p>
        }
        <p>
            <label>Question Prompt:</label>
            @{
                string placeholderText = LevelType == "yesno" ? "required" : "optional";
            }
            <input @bind="@Prompt" placeholder=@placeholderText>
        </p>
        @if (LevelType == "yesno")
        {
            <label for="true-false-answer">Answer:</label>
            <select name="true-false-answer" @bind="@IsTrueString">
                <option value="True">yes</option>
                <option value="False">no</option>
            </select>
        }

        <p>
            @if (LoadedFile == null)
            {
                <label>Image link OR name in gallery:</label>
                <input @bind="@ImageSource">
                <label> or </label>
            }

            @*Image uploader*@
        <div>
                @if (string.IsNullOrEmpty(ImageSource))
                {
                <p>
                    <label>
                        Upload an image up to @(allowFileSizeKB) KB:
                        <InputFile OnChange="@LoadFile" accept="image/*" multiple />
                    </label>
                        @if (LoadedFile != null)
                        {
                        <button @onclick="CancelUpload">@(IsUploading ? "Uploading..." : "Cancel")</button>
                        }
                </p>

                    if (IsLoading)
                    {
                    <p>Uploading...</p>
                    }
                    else if (LoadedFile != null)
                    {
                        string textColorString = "color:#000000";
                        if (FileTooLarge) { textColorString = "color:#FF0000"; }
                    <ul>
                        <li>Name: @LoadedFile.Name</li>
                        <li style=@textColorString>Size (KB): @(Math.Ceiling((decimal)LoadedFile.Size / 1024))</li>
                    </ul>
                    }
                }
        </div>
        </p>

    </div>
    <div>
        <button class="btn btn-primary" @onclick="ClearInputs">Clear Input</button>
    </div>
    <div>
        <button class="btn btn-primary" @onclick="AddQuestion">Add</button>
        <button class="btn btn-primary" @onclick="ToggleDelete">@(isDeleting ? "Deleting" : "Delete")</button>
        <button class="btn btn-primary" @onclick="PlayLevel" style="margin:10px;">Play</button>
    </div>
    <div>
        @{
            int index = 0;
            foreach (Question question in QuestionList)
            {
                int i = index;

                <div class="card" @onclick="EditQuestion">
                    <img src=@question.ImageSource alt="Avatar">
                    <div class="container">
                        <p>@question.Prompt</p>
                    </div>
                </div>

                //<p>
                //    @if (isDeleting)
                //    {
                //        <button class="btn btn-danger" @onclick="() => RemoveQuestion(i)">Delete</button>
                //    }
                //    <label>@question.CorrectAnswer</label>
                //    <label>@question.WrongAnswer1</label>
                //    <label>@question.WrongAnswer2</label>
                //    <label>@question.Prompt</label>
                //    @if (!string.IsNullOrEmpty(question.ImageSource))
                //    {
                //        <img src=@question.ImageSource alt="cannot find image" height="50" style="margin:10px;">
                //    }
                //</p>
                index++;
            }
        }
    </div>
</body>



@code {

    bool isDeleting { get; set; } = false;

    string CorrectAnswer { get; set; } = string.Empty;
    string WrongAnswer1 { get; set; } = string.Empty;
    string WrongAnswer2 { get; set; } = string.Empty;
    string Prompt { get; set; } = string.Empty;
    string IsTrueString { get; set; } = "True";
    string ImageSource { get; set; } = string.Empty;


    Question question = new();


    protected override async Task OnInitializedAsync()
    {
        QuestionHashSet = new();
        await RetrieveAllFiles();
        await LoadQuestionSet();
    }

    private void PlayLevel()
    {
        NavMan.NavigateTo($"Playing/{LevelNumber}/{LevelType}/{QuestionSetId}/");
    }

    async Task AddQuestion()
    {
        if (FileTooLarge)
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Icon = "error",
                    Title = "Image too large!",
                    Text = "You have exceeded the maximum image size. Please upload an image smaller than 1.5mb.",
                });
            return;
        }

        bool canContinue = false;
        switch (LevelType)
        {
            case "multiplechoice":
                canContinue = BuildQuestionMC();
                break;
            case "yesno":
                canContinue = BuildQuestionYN();
                break;
            default:
                break;
        }

        if (canContinue == true)
        {
            if (!string.IsNullOrEmpty(Prompt))
            {
                question.Prompt = Prompt;
            }
            if (Uri.TryCreate(ImageSource, UriKind.Absolute, out Uri? uriResult)
            && (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps))
            {
                question.ImageSource = ImageSource;
            }
            else if (!string.IsNullOrEmpty(ImageSource))
            {
                question.ImageSource = _CDNURL + ImageSource;
            }
            else if (LoadedFile != null)
            {
                question.ImageSource = _CDNURL + LoadedFile.Name;
                await UploadFile();
            }

            QuestionHashSet.Add(question);

            await UpdateQuestionSet();
            await LoadQuestionSet();

            ClearInputs();
        }
        else
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Icon = "error",
                    Title = "Oops...",
                    Text = "It seems like you have not entered an answer for your new question.",
                });
        }
    }

    async Task EditQuestion()
    {
        
    }

    bool BuildQuestionMC()
    {
        if (!string.IsNullOrEmpty(CorrectAnswer) && !string.IsNullOrEmpty(WrongAnswer1) && !string.IsNullOrEmpty(WrongAnswer2))
        {
            question.CorrectAnswer = CorrectAnswer;
            question.WrongAnswer1 = WrongAnswer1;
            question.WrongAnswer2 = WrongAnswer2;
            return true;
        }
        return false;
    }

    bool BuildQuestionYN()
    {
        if (!string.IsNullOrEmpty(IsTrueString) && !string.IsNullOrEmpty(Prompt))
        {
            question.CorrectAnswer = IsTrueString;
            return true;
        }
        return false;
    }
    async Task RemoveQuestion(int index)
    {
        QuestionList.RemoveAt(index);
        QuestionHashSet = QuestionList.ToHashSet();
        await UpdateQuestionSet();
    }
    async Task UpdateQuestionSet()
    {
        var update = await Supabase
        .From<QuestionSet>()
        .Where(x => x.Id == QuestionSetId)
        .Set(x => x.Questions?? new(), QuestionHashSet)
        .Update();
    }
    void ToggleDelete()
    {
        isDeleting = !isDeleting;
    }
    void ClearInputs()
    {
        CorrectAnswer = string.Empty;
        WrongAnswer1 = string.Empty;
        WrongAnswer2 = string.Empty;
        Prompt = string.Empty;
        ImageSource = string.Empty;
        LoadedFile = null;
    }
}