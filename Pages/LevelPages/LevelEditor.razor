@using EnglishChallengesWebApp.Resources.Model
@using Newtonsoft.Json
@using Supabase.Storage

@inherits Level

@page "/Editing/{LevelNumber:int}/{LevelType}/{QuestionSetId:int}"


@*@attribute [Authorize]*@


<head>
    <meta charset="utf-8" />
    <title>LevelEditorPage</title>
</head>
<body>

    <AuthorizeView>
        <Authorized>
            <button class="btn btn-primary" @onclick="ToggleDelete">Edit</button>
            <button class="btn btn-primary" @onclick="AddQuestion">Add</button>
        </Authorized>
    </AuthorizeView>


    <div>
        <p>
            <label>Correct Answer:</label>
            <input @bind="@CorrectAnswer" @oninput="@((e) => { CorrectAnswer=(string)e.Value;})">
        </p>
        <p>
            <label>Wrong Answer 1:</label>
            <input @bind="@WrongAnswer1" @oninput="@((e) => { WrongAnswer1=(string)e.Value;})">
        </p>
        <p>
            <label>Wrong Answer 2:</label>
            <input @bind="@WrongAnswer2" @oninput="@((e) => { WrongAnswer2=(string)e.Value;})">
        </p>
        <p>
            @if (LoadedFile == null)
            {
                <label>Image link OR name in gallery:</label>
                <input @bind="@ImageSource" @oninput="@((e) => { ImageSource=(string)e.Value;})">
                <label> or </label>
            }

            @*Image uploader*@
            <span>
                @if (string.IsNullOrEmpty(ImageSource))
                {
                    <p>
                        <label>
                            Upload an image up to @(allowFileSizeKB) KB:
                            <InputFile OnChange="@LoadFile" accept="image/*" multiple />
                        </label>
                        @if (LoadedFile != null)
                        {
                            <button @onclick="CancelUpload">@(IsUploading ? "Uploading..." : "Cancel")</button>
                        }
                    </p>

                    if (IsLoading)
                    {
                        <p>Uploading...</p>
                    }
                    else
                    {
                        <ul>
                            @if (LoadedFile != null)
                            {
                                string textColorString = "color:#000000";
                                if (LoadedFile.Size > maxFileSize) { textColorString = "color:#FF0000"; }
                                <ul>
                                    <li>Name: @LoadedFile.Name</li>
                                    <li style=@textColorString>Size (KB): @(Math.Ceiling((decimal)LoadedFile.Size / 1024))</li>
                                </ul>
                            }
                        </ul>
                    }
                }
            </span>
        </p>

    </div>
    <div>
        <button class="btn btn-primary" @onclick="AddQuestion">Add</button>
        <button class="btn btn-primary" @onclick="ToggleDelete">@(isDeleting ? "Deleting" : "Delete")</button>
    </div>
    <div>
        @{
            int index = 0;
            foreach (Question question in QuestionList)
            {
                int i = index;
                <p>
                    @if (isDeleting)
                    {
                        <button class="btn btn-danger" @onclick="() => RemoveQuestion(i)">Delete</button>
                    }
                    <label>@question.CorrectAnswer</label>
                    <label>@question.WrongAnswer1</label>
                    <label>@question.WrongAnswer2</label>
                    @if (!string.IsNullOrEmpty(question.ImageSource))
                    {
                        <img src=@question.ImageSource alt=@question.ImageSource height="50" style="margin:10px;">
                    }
                </p>
                index++;
            }
        }
    </div>
</body>



@code {
    bool isDeleting { get; set; } = false;

    string CorrectAnswer { get; set; } = string.Empty;
    string WrongAnswer1 { get; set; } = string.Empty;
    string WrongAnswer2 { get; set; } = string.Empty;
    string ImageSource { get; set; } = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        QuestionHashSet = new();
        await RetrieveAllFiles();
        await LoadQuestionSet();
    }
    async Task AddQuestion()
    {
        if (!string.IsNullOrEmpty(CorrectAnswer))
        {
            Question question = new();
            question.CorrectAnswer = CorrectAnswer;
            question.WrongAnswer1 = WrongAnswer1;
            question.WrongAnswer2 = WrongAnswer2;
            if (Uri.TryCreate(ImageSource, UriKind.Absolute, out Uri uriResult)
            && (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps))
            {
                question.ImageSource = ImageSource;
            }
            else if (!string.IsNullOrEmpty(ImageSource))
            {
                question.ImageSource = _CDNURL + ImageSource;
            }
            else if (LoadedFile != null)
            {
                question.ImageSource = _CDNURL + LoadedFile.Name;
                await UploadFile();
            }

            QuestionHashSet.Add(question);

            await UpdateQuestionSet();
            await LoadQuestionSet();

            ClearInputs();
        }
        else
        {
            SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Icon = "error",
                    Title = "Oops...",
                    Text = "It seems like you have not entered an answer for your new question.",
                });
        }
    }
    async Task RemoveQuestion(int index)
    {
        QuestionList.RemoveAt(index);
        QuestionHashSet = QuestionList.ToHashSet();
        await UpdateQuestionSet();
    }
    async Task UpdateQuestionSet()
    {
        var update = await Supabase
      .From<QuestionSet>()
      .Where(x => x.Id == QuestionSetId)
      .Set(x => x.Questions, QuestionHashSet)
      .Update();
    }
    void ToggleDelete()
    {
        isDeleting = !isDeleting;
    }
    void ClearInputs()
    {
        CorrectAnswer = string.Empty;
        WrongAnswer1 = string.Empty;
        WrongAnswer2 = string.Empty;
        ImageSource = string.Empty;
        LoadedFile = null;
    }
}