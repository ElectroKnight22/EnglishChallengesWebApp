@using EnglishChallengesWebApp.Resources.Model

@inject Client supabase
@inject SweetAlertService Swal
@inject NavigationManager NavMan

@page "/Selecting/{LevelNumber:int}/{*LevelType}"

<h3>Level</h3>

<body>
    @{
            //<AuthorizeView>
        //    <Authorized>
        //        <button class="btn btn-primary" @onclick="ToggleEdit" style="margin:10px;">@(isEditing ? "Editing" : "Playing")</button>
        //        if (isEditing)
        //        {
        //        <button class="btn btn-primary" @onclick="AddQuestionSet" style="margin:10px;">Add</button>
        //        }
        //    </Authorized>
        //</AuthorizeView>

        <button class="btn btn-primary" @onclick="ToggleEdit" style="margin:10px;">@(isEditing ? "Editing" : "Playing") <span class=@(isEditing ? "oi oi-pencil" : "oi oi-play-circle")></span></button>
        if (isEditing)
        {
            <button class="btn btn-primary" @onclick="AddQuestionSet" style="margin:10px;">New <span class="oi oi-plus"></span></button>
        }

        foreach (QuestionSet questionSet in QuestionSets)
        {
            if (questionSet.LevelNumber == LevelNumber && questionSet.LevelType == LevelType)
            {
                <div>
                    @if (isEditing)
                    {
                        <button class="btn btn-danger" style="margin:10px;" @onclick="() =>RemoveQuestionSet(questionSet)">Delete</button>
                    }
                    <button class="btn btn-primary" style="margin:10px;" @onclick="() => OpenQuestionSet(questionSet)">@questionSet.Name</button>
                </div>
            }
        }
    }
</body>

@code {
    [Parameter]
    public int LevelNumber { get; set; }
    [ParameterAttribute]
    public string LevelType { get; set; }
    bool isEditing { get; set; } = false;
    List<QuestionSet> QuestionSets { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        await LoadQuestionSets();
    }
    async Task LoadQuestionSets()
    {
        var result = await supabase.From<QuestionSet>().Get();
        QuestionSets = result.Models;
    }
    void OpenQuestionSet(QuestionSet questionSet)
    {
        string place = isEditing ? "Editing" : "Playing";
        NavMan.NavigateTo($"{place}/{LevelNumber}/{LevelType}/{questionSet.Id}/");
    }
    void ToggleEdit()
    {
        isEditing = !isEditing;
    }
    async Task AddQuestionSet()
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Enter a name for your new question set",
                Input = "text",
                InputPlaceholder = "Name",
                ShowCancelButton = true,
                InputValidator = new InputValidatorCallback((string input) => input.Length == 0 ? "Please enter a name." : null, this),
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            DateTime now = DateTime.Now;
            string nowTimestamp = now.ToString("yyyy/MM/dd hh:mm tt");
            var questionSet = new QuestionSet
                {
                    Name = result.Value,
                    LevelNumber = this.LevelNumber,
                    LevelType = this.LevelType,
                    LastModifiedDate = nowTimestamp,
                };
            await supabase.From<QuestionSet>().Insert(questionSet);
            await LoadQuestionSets();
        }
    }
    async Task RemoveQuestionSet(QuestionSet questionSet)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Are you sure?",
                Text = "You won't be able to revert this!",
                Icon = "warning",
                ShowCancelButton = true,
                ConfirmButtonColor = "#3085d6",
                CancelButtonColor = "#d33",
                ConfirmButtonText = "Yes, delete it!"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await supabase.From<QuestionSet>().Where(x => x.Id == questionSet.Id).Delete();
            await LoadQuestionSets();

            SweetAlertResult newResult = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Deleted!",
                    Text = "Question set has been deleted.",
                    Icon = "success",
                });
        }
    }
}
